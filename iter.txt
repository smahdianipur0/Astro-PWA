iter

SW

const CACHE = "pwabuilder-offline";

importScripts('third_party/workbox/workbox-v7.1.0/workbox-sw.js');

workbox.setConfig({
  modulePathPrefix:'third_party/workbox/workbox-v7.1.0',
})

self.addEventListener("message", (event) => {
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting();
  }
});

workbox.routing.registerRoute(
  new RegExp('/*'),
  new workbox.strategies.StaleWhileRevalidate({
    cacheName: CACHE
  })
);
    <script> if (typeof navigator.serviceWorker !== 'undefined') {navigator.serviceWorker.register('/sw.js')}</script>


save in url


const params: URLSearchParams = new URLSearchParams(window.location.search);

function updateURL(): void {
    params.set(
        "theme",
        (document.getElementById("theme-toggle")! as HTMLInputElement).checked.toString(),);

      params.set(
      "checkbox-two",
      (document.getElementById("bar")! as HTMLInputElement).checked.toString(),);

    window.history.replaceState({}, "", `${window.location.pathname}?${params}`);
}

function getCheckboxState(id: string): boolean {
    return params.get(id) === "true";
}

const checkboxElementOne: HTMLInputElement = document.getElementById(
    "theme-toggle",
) as HTMLInputElement;
checkboxElementOne.checked = getCheckboxState("theme");
checkboxElementOne.addEventListener("change", updateURL);

const checkboxElementTwo: HTMLInputElement = document.getElementById(
 "bar",
 ) as HTMLInputElement;
 checkboxElementTwo.checked = getCheckboxState("checkbox-two");
 checkboxElementTwo.addEventListener("change", updateURL);












function updateURLForRadios(): void {
    if (document.querySelector('input[name="tab"]:checked')) {
        params.set(
            "tab",
            (document.querySelector('input[name="tab"]:checked') as HTMLInputElement)
                .id,
        );
    }
    if (document.querySelector('input[name="another-tab"]:checked')) {
        params.set(
            "another-tab",
            (
                document.querySelector(
                    'input[name="another-tab"]:checked',
                ) as HTMLInputElement
            ).id,
        );
    }

    window.history.replaceState({}, "", `${window.location.pathname}?${params}`);
}

function setInitialRadioStates(): void {
    const tabValue = params.get("tab");

    if (tabValue) {
        const tabRadioToCheck = document.querySelector(
            `input[name="tab"][id="${tabValue}"]`,
        ) as HTMLInputElement;
        if (tabRadioToCheck) {
            tabRadioToCheck.checked = true;
        }
    }

    const anotherTabValue = params.get("another-tab");

    if (anotherTabValue) {
        const anotherTabRadioToCheck = document.querySelector(
            `input[name="another-tab"][id="${anotherTabValue}"]`,
        ) as HTMLInputElement;
        if (anotherTabRadioToCheck) {
            anotherTabRadioToCheck.checked = true;
        }
    }
}

setInitialRadioStates();

const allTabRadios = document.querySelectorAll('input[name="tab"]');
allTabRadios.forEach((radio) => {
    radio.addEventListener("change", updateURLForRadios);
});

const allAnotherTabRadios = document.querySelectorAll(
    'input[name="another-tab"]',
);
allAnotherTabRadios.forEach((radio) => {
    radio.addEventListener("change", updateURLForRadios);
});




qr code


createEffect(() => {
   setResultE(encrypt(key(), iv(), plainText()));
   document.getElementById("result_e")!.textContent = resultE();
   if (resultE() === "") {
      document.getElementById("result_e")!.textContent = "Enter Plain Text";
   }
   QRCode.toCanvas(
      document.getElementById("eqr")!,
      resultE(),
      { width: 160, margin: 1 },
      // function (error) { if (error) console.error(error);console.log("success!");},
   );
});



//old drawer

import './styles/drawer.css'
import Drawer from '@corvu/drawer'
import type { VoidComponent } from 'solid-js'
import { createSignal, onMount, For } from 'solid-js'
import { createPasswordEntry, getAllPasswordEntries, deletePasswordEntry, type PasswordEntry } from './surrealdb'

const DrawerComponent: VoidComponent = () => {
  const [entries, setEntries] = createSignal<PasswordEntry[]>([])
  const [newTitle, setNewTitle] = createSignal('')
  const [newUsername, setNewUsername] = createSignal('')

  onMount(async () => {
    const passwordEntries = await getAllPasswordEntries()
    setEntries(passwordEntries ?? [])
  })

  const handleAddEntry = async () => {
    if (!newTitle() || !newUsername()) {
      alert('Please fill in both title and username')
      return
    }
    await createPasswordEntry(newTitle(), newUsername())
    setNewTitle('')
    setNewUsername('')
    const passwordEntries = await getAllPasswordEntries()
    setEntries(passwordEntries ?? [])
  }

  const handleDeleteEntry = async (id: string) => {
    await deletePasswordEntry(id)
    const passwordEntries = await getAllPasswordEntries()
    setEntries(passwordEntries ?? [])
  }

  return (
    <Drawer breakPoints={[0.75]}>
      {(props) => (
        <>
          <Drawer.Trigger>Open</Drawer.Trigger>
          <Drawer.Portal>
            <Drawer.Overlay
              style={{
                'background-color': `rgb(0 0 0 / ${
                  0.5 * props.openPercentage
                })`,
              }}
            />
            <Drawer.Content>
              <div class="notch" />
              <Drawer.Close> close </Drawer.Close>         
                <Drawer.Label>Password Entries</Drawer.Label>
                
                <div class="input-group">
                  <input
                    type="text"
                    placeholder="Enter title"
                    value={newTitle()}
                    onInput={(e) => setNewTitle(e.currentTarget.value)}
                  />
                  <input
                    type="text"
                    placeholder="Enter username"
                    value={newUsername()}
                    onInput={(e) => setNewUsername(e.currentTarget.value)}
                  />
                  <button 
                    onClick={handleAddEntry}
                    disabled={!newTitle() || !newUsername()}
                  >
                    Add Entry
                  </button>
                </div>
                
                <div class="entries-list">
                  <For each={[...entries()].reverse()} >
                    {(entry) => (
                      <div  class="entry-item">
                        <p>Title: {entry.title}</p>
                        <p>Username: {entry.username}</p>
                        <button 
                          class="delete-button"
                          onClick={() => handleDeleteEntry(entry.id.id)}
                        >
                          Delete
                        </button>
                      </div>
                    )}
                  </For>
                </div>
              <Drawer.Description>Drag down to close me.</Drawer.Description>
            </Drawer.Content>
          </Drawer.Portal>
        </>
      )}
    </Drawer>
  )
}

export default DrawerComponent