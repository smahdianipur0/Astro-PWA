---

---

<div class="input-group">
  <input type="text" id="titleInput" placeholder="Enter title"/>
  <input type="text" id="passwordInput" placeholder="Enter username" />
  <button id="addEntryButton">Add Entry </button>
</div>

<div class="entries-list" id="entriesList"></div>

<script>
import {
	createPasswordEntry,
	getAllPasswordEntries,
	deletePasswordEntry,
	type PasswordEntry,} from "../Utils/surrealdb";
import { waitForElement } from "../Utils/waitForElement";
import { createSignal, createEffect } from "solid-js";



// signals
const [entries, setEntries] = createSignal<PasswordEntry[]>([])
const [newTitle, setNewTitle] = createSignal('')
const [newPassword, setPassword] = createSignal('');


// initialize entries
(async () => {
setEntries(await getAllPasswordEntries() ?? []);
})();


// render entries based on signal
createEffect(() => {
const currentEntries = entries();

(async () => {
    const entriesList = await waitForElement('#entriesList') as HTMLElement;
    
    entriesList.innerHTML = ''; 
    [...currentEntries ?? []].reverse().forEach(entry => {
        const entryElement = document.createElement('div');
        entryElement.className = 'entry-item';
        entryElement.innerHTML = `
            <div>
                <p class="hint">${entry.title}</p>
                <p>${entry.password}</p>
            </div>
            <button class="delete-button" id="${entry.id.id}">
                <svg width="24" height="24" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path d="M21.5 6a1 1 0 0 1-.883.993L20.5 7h-.845l-1.231 12.52A2.75 2.75 0 0 1 15.687 22H8.313a2.75 2.75 0 0 1-2.737-2.48L4.345 7H3.5a1 1 0 0 1 0-2h5a3.5 3.5 0 1 1 7 0h5a1 1 0 0 1 1 1Zm-7.25 3.25a.75.75 0 0 0-.743.648L13.5 10v7l.007.102a.75.75 0 0 0 1.486 0L15 17v-7l-.007-.102a.75.75 0 0 0-.743-.648Zm-4.5 0a.75.75 0 0 0-.743.648L9 10v7l.007.102a.75.75 0 0 0 1.486 0L10.5 17v-7l-.007-.102a.75.75 0 0 0-.743-.648ZM12 3.5A1.5 1.5 0 0 0 10.5 5h3A1.5 1.5 0 0 0 12 3.5Z" fill="#ffffff"/>
                </svg>
            </button>
        `;
        entriesList.appendChild(entryElement);
    });
})();
});


const handleAddEntry = async () => {
	if (!newTitle() || !newPassword()) {
		alert("Please fill in both title and username");
		return;
	}
	await createPasswordEntry(newTitle(), newPassword());
	setNewTitle("");
	setPassword("");
	setEntries(await getAllPasswordEntries() ?? [])
};


const handleDeleteEntry = async (id: string) => {
    await deletePasswordEntry(id)
    setEntries(await getAllPasswordEntries() ?? [])
}

// event delegation
(async () => {
    const inputGroup = await waitForElement('.input-group') as HTMLElement;
    const entriesList = await waitForElement('#entriesList') as HTMLElement;

    entriesList.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        const deleteButton = target.closest('.delete-button');
        if (deleteButton) {
            handleDeleteEntry(deleteButton.id);
        }
    });

    inputGroup.addEventListener("click", (e) => { 
        const target = e.target as HTMLElement;
        if (target.id === "addEntryButton") {
            handleAddEntry();
            setNewTitle('')
            setPassword('') 
        }
    });

    inputGroup.addEventListener("input", (e) => {
        const target = e.target as HTMLInputElement;
        if (target.id === "titleInput") {
            setNewTitle(target.value);
        } else if (target.id === "passwordInput") {
            setPassword(target.value);
        }
    });
})();

</script> 